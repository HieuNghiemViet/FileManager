Index: app/src/main/java/com/example/filemanager/adapter/StorageAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filemanager.adapter;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Color;\r\nimport android.media.MediaMetadataRetriever;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.example.filemanager.R;\r\nimport com.example.filemanager.callback.OnItemClickListener;\r\nimport com.example.filemanager.model.Folder;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.io.File;\r\nimport java.io.InputStream;\r\nimport java.util.ArrayList;\r\n\r\npublic class StorageAdapter extends RecyclerView.Adapter<StorageAdapter.ViewHolder> {\r\n\r\n    private ArrayList<Folder> folders;\r\n    private Context context;\r\n    private OnItemClickListener callback;\r\n    public ArrayList<String> selectListPath;\r\n    public boolean stateView = false;\r\n\r\n    public StorageAdapter(ArrayList<Folder> folders, Context context, OnItemClickListener callback) {\r\n        this.folders = folders;\r\n        this.context = context;\r\n        this.callback = callback;\r\n        this.selectListPath = new ArrayList<>();\r\n    }\r\n\r\n\r\n    public class ViewHolder extends RecyclerView.ViewHolder {\r\n        private TextView tv_nameFolder;\r\n        private TextView tv_numberFile;\r\n        private ImageView img_folder;\r\n        public LinearLayout lnl_items;\r\n\r\n        public ViewHolder(View itemView) {\r\n            super(itemView);\r\n            tv_nameFolder = itemView.findViewById(R.id.name_folder);\r\n            tv_numberFile = itemView.findViewById(R.id.number_files);\r\n            img_folder = itemView.findViewById(R.id.img_folder);\r\n            lnl_items = itemView.findViewById(R.id.lnl_items);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public StorageAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\r\n        Context context = parent.getContext();\r\n        LayoutInflater inflater = LayoutInflater.from(context);\r\n        View StorageView = inflater.inflate(R.layout.item_storage, parent, false);\r\n        StorageAdapter.ViewHolder viewHolder = new StorageAdapter.ViewHolder(StorageView);\r\n        return viewHolder;\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(StorageAdapter.ViewHolder holder, int position) {\r\n        Folder folder = folders.get(position);\r\n        holder.tv_nameFolder.setText(folder.getNameFolder());\r\n\r\n        if (folder.getNameFolder().toLowerCase().endsWith(\".jpeg\") ||\r\n                folder.getNameFolder().toLowerCase().endsWith(\".jpg\") ||\r\n                folder.getNameFolder().toLowerCase().endsWith(\".png\")) {\r\n            Glide.with(context).load(folder.getPathFolder())\r\n                    .placeholder(R.drawable.ic_image_2)\r\n                    .into(holder.img_folder);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".mp3\") || folder.getNameFolder().toLowerCase().endsWith(\".wav\")) {\r\n            Glide.with(context).load(getAlbumImage(folder.getPathFolder()))\r\n                    .placeholder(R.drawable.compact_disc)\r\n                    .into(holder.img_folder);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".mp4\")) {\r\n            Glide.with(context).load(folder.getPathFolder())\r\n                    .placeholder(R.drawable.ic_video_2)\r\n                    .into(holder.img_folder);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".pdf\")) {\r\n            holder.img_folder.setImageResource(R.drawable.ic_pdf);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".docx\")) {\r\n            holder.img_folder.setImageResource(R.drawable.ic_docx_file_format_symbol);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".txt\")) {\r\n            holder.img_folder.setImageResource(R.drawable.ic_txt_file_symbol);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".zip\")) {\r\n            holder.img_folder.setImageResource(R.drawable.ic_zip);\r\n        } else if (folder.getNameFolder().toLowerCase().endsWith(\".apk\")) {\r\n            holder.img_folder.setImageResource(R.drawable.ic_apk_file);\r\n        } else {\r\n            holder.img_folder.setImageResource(R.drawable.ic_folder);\r\n        }\r\n\r\n        int items = 0;\r\n        File[] files = folder.getFile().listFiles();\r\n        if (files != null) {\r\n            for (int i = 0; i < files.length; i++) {\r\n                if (!files[i].isHidden()) {\r\n                    items += 1;\r\n                }\r\n            }\r\n        }\r\n        if (items > 0) {\r\n            holder.tv_numberFile.setText(items + \" Files\");\r\n        } else {\r\n            holder.tv_numberFile.setText(\"empty\");\r\n        }\r\n\r\n        holder.img_folder.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                callback.onClick(position);\r\n            }\r\n        });\r\n\r\n        holder.lnl_items.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (stateView) {\r\n                    folder.setSelected(!folder.isSelected());\r\n\r\n                    if (folder.isSelected()) {\r\n                        holder.lnl_items.setBackgroundColor(Color.CYAN);\r\n                        selectListPath.add(folder.getPathFolder());\r\n                    } else {\r\n                        holder.lnl_items.setBackgroundColor(Color.WHITE);\r\n                        selectListPath.remove(folder.getPathFolder());\r\n                    }\r\n                }\r\n                callback.onLongClick(position);\r\n                if(selectListPath.size() == 0){\r\n                    stateView = false;\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        holder.lnl_items.setOnLongClickListener(new View.OnLongClickListener() {\r\n            @Override\r\n            public boolean onLongClick(View v) {\r\n                if (!stateView) {\r\n                    folder.setSelected(!folder.isSelected());\r\n\r\n                    if (folder.isSelected()) {\r\n                        holder.lnl_items.setBackgroundColor(Color.CYAN);\r\n                        selectListPath.add(folder.getPathFolder());\r\n                    }\r\n                }\r\n                stateView = true;\r\n                if(selectListPath.size() == 0){\r\n                    stateView = false;\r\n                }\r\n                callback.onLongClick(position);\r\n                return true;\r\n            }\r\n        });\r\n\r\n\r\n        holder.lnl_items.setBackgroundColor(Color.WHITE);\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return folders.size();\r\n    }\r\n\r\n    private Bitmap getAlbumImage(String path) {\r\n        MediaMetadataRetriever mdr = new MediaMetadataRetriever();\r\n        mdr.setDataSource(path);\r\n        InputStream inputStream = null;\r\n        if (mdr.getEmbeddedPicture() != null) {\r\n            inputStream = new ByteArrayInputStream(mdr.getEmbeddedPicture());\r\n        }\r\n        mdr.release();\r\n        Bitmap bitmap = BitmapFactory.decodeStream(inputStream);\r\n        return bitmap;\r\n    }\r\n\r\n    public void changeBackGroundItems(boolean isSelect) {\r\n        for (int i = 0; i < folders.size(); i++) {\r\n            folders.get(i).setSelected(isSelect);\r\n            notifyItemChanged(i);\r\n        }\r\n    }\r\n\r\n    public void resetStage() {\r\n        stateView = false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/filemanager/adapter/StorageAdapter.java	(revision 5a80d676a67d9cc48f63bd2857bcc7393619eb08)
+++ app/src/main/java/com/example/filemanager/adapter/StorageAdapter.java	(date 1625459224801)
@@ -171,6 +171,7 @@
         return folders.size();
     }
 
+
     private Bitmap getAlbumImage(String path) {
         MediaMetadataRetriever mdr = new MediaMetadataRetriever();
         mdr.setDataSource(path);
Index: app/src/main/java/com/example/filemanager/ImageActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.filemanager;\r\n\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.FileProvider;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager;\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\r\n\r\nimport android.app.Activity;\r\nimport android.app.Dialog;\r\nimport android.app.RecoverableSecurityException;\r\nimport android.content.ContentResolver;\r\nimport android.content.ContentUris;\r\nimport android.content.ContentValues;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentSender;\r\nimport android.database.Cursor;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.net.Uri;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.text.format.Formatter;\r\nimport android.view.Gravity;\r\nimport android.view.View;\r\nimport android.view.Window;\r\nimport android.view.WindowManager;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.filemanager.adapter.ImageAdapter;\r\nimport com.example.filemanager.callback.OnItemClickListener;\r\nimport com.example.filemanager.model.Image;\r\n\r\nimport java.io.File;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\n\r\npublic class ImageActivity extends AppCompatActivity implements OnItemClickListener {\r\n    private static Uri extStorageUri = MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL);\r\n    private static Uri extDownloadUri = MediaStore.Downloads.getContentUri(MediaStore.VOLUME_EXTERNAL);\r\n    private int DELETE_REQUEST_CODE = 123;\r\n    private int RENAME_REQUEST_CODE = 300;\r\n    private RecyclerView recyclerView;\r\n    private ArrayList<Image> arrayList = new ArrayList<>();\r\n    private ImageAdapter adapter;\r\n    private TextView tv_info_image_cancel;\r\n    private TextView tv_name;\r\n    private TextView tv_path;\r\n    private TextView tv_size;\r\n    private TextView tv_date;\r\n    private TextView tv_resolution;\r\n    private TextView tv_rename_cancel;\r\n    private TextView tv_rename_ok;\r\n    private EditText edt_rename;\r\n    private Image imageTmp;\r\n\r\n    private SwipeRefreshLayout swipe;\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_image);\r\n\r\n        initView();\r\n        setDataAdapter();\r\n\r\n    }\r\n\r\n    private void initView() {\r\n        recyclerView = (RecyclerView) findViewById(R.id.rcv_image);\r\n        swipe = (SwipeRefreshLayout) findViewById(R.id.SwipeRefreshLayoutImage);\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    private void setDataAdapter() {\r\n        adapter = new ImageAdapter(arrayList, this, this);\r\n        getImage();\r\n        recyclerView.setAdapter(adapter);\r\n        StaggeredGridLayoutManager staggeredGridLayoutManager = new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL);\r\n        recyclerView.setLayoutManager(staggeredGridLayoutManager);\r\n\r\n        swipe.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {\r\n            @Override\r\n            public void onRefresh() {\r\n                swipe.setRefreshing(false);\r\n                setDataAdapter();\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getImage() {\r\n        arrayList.clear();\r\n        ContentResolver contentResolver = getContentResolver();\r\n        Uri imgUri;\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n            imgUri = MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL);\r\n        } else {\r\n            imgUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\r\n        }\r\n\r\n        Cursor imgCursor = contentResolver.query(imgUri, null, null, null, MediaStore.Images.Media.DATE_MODIFIED + \" DESC\");\r\n        if (imgCursor != null && imgCursor.moveToFirst()) {\r\n            int imgTitle = imgCursor.getColumnIndex(MediaStore.Images.Media.TITLE);\r\n            int imgDisplay = imgCursor.getColumnIndex(MediaStore.Images.Media.DISPLAY_NAME);\r\n            int imgPath = imgCursor.getColumnIndex(MediaStore.Images.Media.DATA);\r\n            int imgSize = imgCursor.getColumnIndex(MediaStore.Images.Media.SIZE);\r\n            int imgDate = imgCursor.getColumnIndex(MediaStore.Images.Media.DATE_MODIFIED);\r\n            int imgId = imgCursor.getColumnIndex(MediaStore.Images.Media._ID);\r\n            do {\r\n                String currentTitle = imgCursor.getString(imgDisplay);\r\n                String currentPath = imgCursor.getString(imgPath);\r\n                String currentDisplay = imgCursor.getString(imgDisplay);\r\n                long currentSize = imgCursor.getLong(imgSize);\r\n                long currentDate = imgCursor.getLong(imgDate);\r\n                long currentID = imgCursor.getLong(imgId);\r\n                arrayList.add(new Image(currentPath, currentTitle, currentSize, currentDate, currentDisplay, currentID));\r\n            } while (imgCursor.moveToNext());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onClick(int position) {\r\n        Intent intent = new Intent(ImageActivity.this, DetailImageActivity.class);\r\n        Image image = arrayList.get(position);\r\n        Bundle bundle = new Bundle();\r\n        bundle.putSerializable(\"image\", image);\r\n        intent.putExtras(bundle);\r\n        startActivity(intent);\r\n    }\r\n\r\n    @Override\r\n    public void onLongClick(int position) {\r\n        imageTmp = arrayList.get(position);\r\n        AlertDialog.Builder myBuilder = new AlertDialog.Builder(this);\r\n        final String[] feature = {\"Thông tin\", \"Đổi tên\", \"Xóa\", \"Chia Sẻ\"};\r\n\r\n        myBuilder.setItems(feature, new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int position) {\r\n                switch (position) {\r\n                    case 0:\r\n                        infoImage(Gravity.CENTER, imageTmp);\r\n                        break;\r\n                    case 1:\r\n                        renameImage(Gravity.CENTER, imageTmp);\r\n                        break;\r\n                    case 2:\r\n                        deleteDialog(imageTmp);\r\n                        break;\r\n                    case 3:\r\n                        shareImage(imageTmp);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        myBuilder.create().show();\r\n    }\r\n\r\n\r\n    private void renameImage(int gravity, Image image) {\r\n        final Dialog dialog = new Dialog(this);\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        dialog.setContentView(R.layout.layout_dialog_rename);\r\n\r\n        tv_rename_cancel = dialog.findViewById(R.id.tv_rename_huy);\r\n        tv_rename_ok = dialog.findViewById(R.id.tv_rename_ok);\r\n        edt_rename = dialog.findViewById(R.id.edt_rename);\r\n        edt_rename.setText(image.getTitle());\r\n\r\n        Window window = dialog.getWindow();\r\n        if (window == null) {\r\n            return;\r\n        }\r\n        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);\r\n        window.setBackgroundDrawable(new ColorDrawable(Color.WHITE));\r\n\r\n        WindowManager.LayoutParams windowAttributes = window.getAttributes();\r\n        windowAttributes.gravity = gravity;\r\n        window.setAttributes(windowAttributes);\r\n        dialog.show();\r\n\r\n        tv_rename_ok.setOnClickListener(new View.OnClickListener() {\r\n            @RequiresApi(api = Build.VERSION_CODES.O)\r\n            @Override\r\n            public void onClick(View v) {\r\n                try {\r\n                    if (image.getPath().contains(\"/storage/emulated/0/Download\")) {\r\n                        renameFileDownloadUsingDisplayName(ImageActivity.this, image.getDisplayName());\r\n                    } else {\r\n                        renameFileStorageUsingDisplayName(ImageActivity.this, image.getDisplayName());\r\n                    }\r\n                } catch (IntentSender.SendIntentException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n\r\n        tv_rename_cancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    public boolean renameFileDownloadUsingDisplayName(Context context, String displayName) throws IntentSender.SendIntentException {\r\n        try {\r\n            Long id = getIdDownloadFromDisplayName(displayName);\r\n            ContentResolver resolver = context.getContentResolver();\r\n            Uri mUri = ContentUris.withAppendedId(extDownloadUri, id);\r\n            ContentValues contentValues = new ContentValues();\r\n            contentValues.put(MediaStore.Files.FileColumns.IS_PENDING, 1);\r\n            contentValues.clear();\r\n\r\n            contentValues.put(MediaStore.Downloads.DISPLAY_NAME, edt_rename.getText().toString());\r\n            contentValues.put(MediaStore.Downloads.IS_PENDING, 0);\r\n            contentValues.put(MediaStore.Downloads.TITLE, edt_rename.getText().toString());\r\n            resolver.update(mUri, contentValues, null, null);\r\n            imageTmp.setTitle(edt_rename.getText().toString());\r\n            adapter.notifyDataSetChanged();\r\n            getImage();\r\n            return true;\r\n        } catch (SecurityException securityException) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n                RecoverableSecurityException recoverableSecurityException;\r\n                if (securityException instanceof RecoverableSecurityException) {\r\n                    recoverableSecurityException =\r\n                            (RecoverableSecurityException) securityException;\r\n                } else {\r\n                    throw new RuntimeException(\r\n                            securityException.getMessage(), securityException);\r\n                }\r\n                IntentSender intentSender = recoverableSecurityException.getUserAction()\r\n                        .getActionIntent().getIntentSender();\r\n                startIntentSenderForResult(intentSender, RENAME_REQUEST_CODE,\r\n                        null, 0, 0, 0, null);\r\n            } else {\r\n                throw new RuntimeException(\r\n                        securityException.getMessage(), securityException);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Long getIdDownloadFromDisplayName(String displayName) {\r\n        String[] projection;\r\n        projection = new String[]{MediaStore.Files.FileColumns._ID};\r\n        Cursor cursor = getContentResolver().query(extDownloadUri, projection,\r\n                MediaStore.Files.FileColumns.DISPLAY_NAME + \" LIKE ?\", new String[]{displayName}, null);\r\n\r\n        assert cursor != null;\r\n        cursor.moveToFirst();\r\n\r\n        if (cursor.getCount() > 0) {\r\n            int columnIndex = cursor.getColumnIndex(projection[0]);\r\n            long fileId = cursor.getLong(columnIndex);\r\n\r\n            cursor.close();\r\n            return fileId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public boolean renameFileStorageUsingDisplayName(Context context, String displayName) throws IntentSender.SendIntentException {\r\n        try {\r\n            Long id = getIdStorageFromDisplayName(displayName);\r\n            ContentResolver resolver = context.getContentResolver();\r\n            Uri mUri = ContentUris.withAppendedId(extStorageUri, id);\r\n            ContentValues contentValues = new ContentValues();\r\n            contentValues.put(MediaStore.Files.FileColumns.IS_PENDING, 1);\r\n            contentValues.clear();\r\n\r\n            contentValues.put(MediaStore.Images.Media.DISPLAY_NAME, edt_rename.getText().toString());\r\n            contentValues.put(MediaStore.Images.Media.IS_PENDING, 0);\r\n            contentValues.put(MediaStore.Images.Media.TITLE, edt_rename.getText().toString());\r\n            resolver.update(mUri, contentValues, null, null);\r\n            imageTmp.setTitle(edt_rename.getText().toString());\r\n            adapter.notifyDataSetChanged();\r\n            getImage();\r\n            return true;\r\n        } catch (SecurityException securityException) {\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n                RecoverableSecurityException recoverableSecurityException;\r\n                if (securityException instanceof RecoverableSecurityException) {\r\n                    recoverableSecurityException =\r\n                            (RecoverableSecurityException) securityException;\r\n                } else {\r\n                    throw new RuntimeException(\r\n                            securityException.getMessage(), securityException);\r\n                }\r\n                IntentSender intentSender = recoverableSecurityException.getUserAction()\r\n                        .getActionIntent().getIntentSender();\r\n                startIntentSenderForResult(intentSender, RENAME_REQUEST_CODE,\r\n                        null, 0, 0, 0, null);\r\n            } else {\r\n                throw new RuntimeException(\r\n                        securityException.getMessage(), securityException);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public Long getIdStorageFromDisplayName(String displayName) {\r\n        String[] projection;\r\n        projection = new String[]{MediaStore.Files.FileColumns._ID};\r\n        Cursor cursor = getContentResolver().query(extStorageUri, projection,\r\n                MediaStore.Files.FileColumns.DISPLAY_NAME + \" LIKE ?\", new String[]{displayName}, null);\r\n\r\n        assert cursor != null;\r\n        cursor.moveToFirst();\r\n\r\n        if (cursor.getCount() > 0) {\r\n            int columnIndex = cursor.getColumnIndex(projection[0]);\r\n            long fileId = cursor.getLong(columnIndex);\r\n\r\n            cursor.close();\r\n            return fileId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    public Uri getUriFromDisplayName(Context context, String displayName) {\r\n        String[] projection;\r\n        projection = new String[]{MediaStore.Files.FileColumns._ID};\r\n        Uri imgUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;\r\n        Cursor cursor = context.getContentResolver().query(imgUri, projection,\r\n                MediaStore.Files.FileColumns.DISPLAY_NAME + \" LIKE ?\", new String[]{displayName}, null);\r\n\r\n        assert cursor != null;\r\n        cursor.moveToFirst();\r\n\r\n        if (cursor.getCount() > 0) {\r\n            int columnIndex = cursor.getColumnIndex(projection[0]);\r\n            long fileId = cursor.getLong(columnIndex);\r\n\r\n            cursor.close();\r\n            return Uri.parse(imgUri.toString() + \"/\" + fileId);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    public boolean deleteFileUsingDisplayName(Context context, String displayName) throws IntentSender.SendIntentException {\r\n        Uri uri = getUriFromDisplayName(context, displayName);\r\n        if (uri != null) {\r\n            final ContentResolver resolver = context.getContentResolver();\r\n            String[] selectionArgsPdf = new String[]{displayName};\r\n\r\n            try {\r\n                //\r\n                if (resolver.delete(uri, MediaStore.Files.FileColumns.DISPLAY_NAME + \"=?\", selectionArgsPdf) > 0) {\r\n                    arrayList.remove(imageTmp);\r\n                    adapter.notifyDataSetChanged();\r\n                }\r\n                return true;\r\n            } catch (SecurityException securityException) {\r\n                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\r\n                    RecoverableSecurityException recoverableSecurityException;\r\n                    if (securityException instanceof RecoverableSecurityException) {\r\n                        recoverableSecurityException =\r\n                                (RecoverableSecurityException) securityException;\r\n                    } else {\r\n                        throw new RuntimeException(\r\n                                securityException.getMessage(), securityException);\r\n                    }\r\n                    IntentSender intentSender = recoverableSecurityException.getUserAction()\r\n                            .getActionIntent().getIntentSender();\r\n                    startIntentSenderForResult(intentSender, DELETE_REQUEST_CODE,\r\n                            null, 0, 0, 0, null);\r\n                } else {\r\n                    throw new RuntimeException(\r\n                            securityException.getMessage(), securityException);\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void deleteDialog(Image image) {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"Delete Image\")\r\n                .setMessage(\"You Are OK?\")\r\n                .setPositiveButton(\"Yes\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        try {\r\n                            //\r\n                            deleteFileUsingDisplayName(ImageActivity.this, image.getDisplayName());\r\n                        } catch (IntentSender.SendIntentException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        dialog.dismiss();\r\n                    }\r\n                })\r\n                .setNegativeButton(\"No\", new DialogInterface.OnClickListener() {\r\n                    @Override\r\n                    public void onClick(DialogInterface dialog, int which) {\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n        builder.create().show();\r\n    }\r\n\r\n    private void shareImage(Image image) {\r\n        File imgFile = new File(image.getPath());\r\n        Intent shareIntent = new Intent(Intent.ACTION_SEND);\r\n        shareIntent.setType(\"image/jpeg\");\r\n        Uri photoURI = FileProvider.getUriForFile(getApplicationContext(), BuildConfig.APPLICATION_ID + \".provider\", imgFile);\r\n        shareIntent.putExtra(Intent.EXTRA_STREAM, photoURI);\r\n        shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\r\n        startActivity(Intent.createChooser(shareIntent, \"Share\"));\r\n    }\r\n\r\n    private void infoImage(int gravity, Image image) {\r\n        final Dialog dialog = new Dialog(this);\r\n        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);\r\n        dialog.setContentView(R.layout.layout_dialog_info_image);\r\n\r\n        tv_info_image_cancel = dialog.findViewById(R.id.tv_cancel_image);\r\n        tv_name = dialog.findViewById(R.id.tv_name_image_main_storage);\r\n        tv_path = dialog.findViewById(R.id.tv_path_main_image_storage);\r\n        tv_size = dialog.findViewById(R.id.tv_size_image_main_storage);\r\n        tv_date = dialog.findViewById(R.id.tv_dayImage);\r\n        tv_resolution = dialog.findViewById(R.id.tv_resolutionImage);\r\n\r\n        tv_name.setText(image.getDisplayName());\r\n        tv_path.setText(image.getPath());\r\n        tv_size.setText(Formatter.formatShortFileSize(dialog.getContext(), image.getSize()));\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"MMM dd,yyyy HH:mm\");\r\n        tv_date.setText(sdf.format(image.getDate() * 1000));\r\n\r\n        Bitmap bitmap = BitmapFactory.decodeFile(image.getPath());\r\n        bitmap.getHeight();\r\n        bitmap.getWidth();\r\n        tv_resolution.setText(bitmap.getWidth() + \" x \" + bitmap.getHeight());\r\n\r\n        Window window = dialog.getWindow();\r\n        if (window == null) {\r\n            return;\r\n        }\r\n\r\n        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);\r\n        window.setBackgroundDrawable(new ColorDrawable(Color.WHITE));\r\n\r\n        WindowManager.LayoutParams windowAttributes = window.getAttributes();\r\n        windowAttributes.gravity = gravity;\r\n        window.setAttributes(windowAttributes);\r\n        dialog.show();\r\n\r\n        tv_info_image_cancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (requestCode == DELETE_REQUEST_CODE) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                try {\r\n                    //\r\n                    deleteFileUsingDisplayName(ImageActivity.this, imageTmp.getDisplayName());\r\n                } catch (IntentSender.SendIntentException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        if ((requestCode == RENAME_REQUEST_CODE)) {\r\n            if (resultCode == Activity.RESULT_OK) {\r\n                try {\r\n                    renameFileDownloadUsingDisplayName(ImageActivity.this, imageTmp.getDisplayName());\r\n                    renameFileStorageUsingDisplayName(ImageActivity.this, imageTmp.getDisplayName());\r\n                } catch (IntentSender.SendIntentException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/filemanager/ImageActivity.java	(revision 5a80d676a67d9cc48f63bd2857bcc7393619eb08)
+++ app/src/main/java/com/example/filemanager/ImageActivity.java	(date 1625452330425)
@@ -65,14 +65,12 @@
 
     private SwipeRefreshLayout swipe;
 
-    @RequiresApi(api = Build.VERSION_CODES.O)
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_image);
 
         initView();
         setDataAdapter();
-
     }
 
     private void initView() {
@@ -80,7 +78,6 @@
         swipe = (SwipeRefreshLayout) findViewById(R.id.SwipeRefreshLayoutImage);
     }
 
-    @RequiresApi(api = Build.VERSION_CODES.O)
     private void setDataAdapter() {
         adapter = new ImageAdapter(arrayList, this, this);
         getImage();
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/runConfigurations.xml	(date 1625448743711)
+++ .idea/runConfigurations.xml	(date 1625448743711)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
